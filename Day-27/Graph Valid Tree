class Solution(object):
    def validTree(self, n, edges):
        parent = [i for i in range(n)]

        def find(x):
            while parent[x] != x:
                parent[x] = parent[parent[x]]  # Path compression
                x = parent[x]
            return x

        for u, v in edges:
            pu, pv = find(u), find(v)
            if pu == pv:
                return False  # Cycle detected
            parent[pu] = pv  # Union

        return len(edges) == n - 1
