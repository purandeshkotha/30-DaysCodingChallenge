class Solution(object):
    def countComponents(self, n, edges):
        parent = [i for i in range(n)]

        def find(x):
            while parent[x] != x:
                parent[x] = parent[parent[x]]  # Path compression
                x = parent[x]
            return x

        def union(x, y):
            rootX, rootY = find(x), find(y)
            if rootX != rootY:
                parent[rootX] = rootY

        for u, v in edges:
            union(u, v)

        # Count unique roots
        return len(set(find(i) for i in range(n)))
