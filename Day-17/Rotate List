# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: Optional[ListNode]
        :type k: int
        :rtype: Optional[ListNode]
        """
        if not head or not head.next or k == 0:
            return head
        
        # Step 1: find length and last node
        length = 1
        tail = head
        while tail.next:
            tail = tail.next
            length += 1
        
        # Step 2: reduce k
        k = k % length
        if k == 0:
            return head
        
        # Step 3: make circular
        tail.next = head
        
        # Step 4: find new tail (n-k-1 steps from start)
        steps_to_new_tail = length - k
        new_tail = head
        for _ in range(steps_to_new_tail - 1):
            new_tail = new_tail.next
        
        # Step 5: define new head
        new_head = new_tail.next
        
        # Step 6: break circular link
        new_tail.next = None
        
        return new_head
